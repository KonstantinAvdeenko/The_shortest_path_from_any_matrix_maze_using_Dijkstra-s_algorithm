using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace VihodIzLabirintaKrathaishiiPutAlgDeikstra
{
    class Program
    {
        static void Main(string[] args)
        {
            var x = new List<int>();// список координат х первая координата х=1 
            var y = new List<int>();// список координат y первая координата y=1
            var x1 = new List<int>();// список для сохранения новых координат х
            var y1 = new List<int>();// список для сохранения новых координат y
            Console.Write("Введите количество строк матрицы лабиринта:");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов матрицы лабиринта:");
            int m = int.Parse(Console.ReadLine());
            var array = new int[n + 2, m + 2];
            // массив для ограничивания лабиринта размером введенной пользователем размерности матрицы
            for (int i = 0; i < n + 2; i++)
            {
                array[i, 0] = -1;
                array[i, m + 1] = -1;
            }
            for (int i = 0; i < m + 2; i++)
            {
                array[0, i] = -1;
                array[n + 1, i] = -1;
            }
            // заполняет лабиринт, где "-1" - стена "0" - свободная ячейка для прохода
            Console.WriteLine("Данная матрица введите строками через пробел только -1 если в лабиринте стена и 0 если свободный проход:");
            string[] inp;
            for (int i = 1; i <= n; i++) // заполняет лабиринт построчно
            {
                inp = Console.ReadLine().Split(' '); // запоминание в строковый массив каждой строки лабиринта
                for (int j = 1; j <= m; j++)
                    array[i, j] = int.Parse(inp[j - 1]); // разделение всех элементов в строке и запоминание их с присвоенными координатами
            }
            Console.Write("Введите координаты (x y) исходной точки через пробел: ");
            string[] inp1 = Console.ReadLine().Split(' ');
            x.Add(int.Parse(inp1[0]));
            y.Add(int.Parse(inp1[1]));
            x.Add(-1); // помечается начальная координата  
            y.Add(-1);
            Console.Write("Введите координаты (x y) конечной точки через пробел: ");
            inp = Console.ReadLine().Split(' ');
            int l = 0;
            while ((x.Count != 1) && (y.Count != 1) && (array[x[0], y[0]] != -1)) // выполняется до тех пор пока длинна списка текущих координат не станет равной 1
            {
                while ((x[l] != -1) && (y[l] != -1)) // выполняется до тех пор пока не дойдет до последнего значения в списке текущих координат
                {
                    if (array[x[l] + 1, y[l]] == 0)// если клетка справа свободна то ей присваивается значение на 1 больше чем в текущей. 
                    {
                        array[x[l] + 1, y[l]] = array[x[l], y[l]] + 1;
                        x1.Add(x[l] + 1);// координату x клетки справа в конец списка
                        y1.Add(y[l]);    // координату y клетки справа в конец списка
                    }
                    if (array[x[l], y[l] + 1] == 0)// если клетка снизу свободна то ей присваивается значение на 1 больше чем в текущей
                    {
                        array[x[l], y[l] + 1] = array[x[l], y[l]] + 1;
                        x1.Add(x[l]);// координату х клетки снизу в конец списка
                        y1.Add(y[l] + 1);// координату y клетки снизу в конец списка
                    }
                    if (array[x[l] - 1, y[l]] == 0)// если клетка слева свободна то ей присваивается значение на 1 больше чем в текущей
                    {
                        array[x[l] - 1, y[l]] = array[x[l], y[l]] + 1;
                        x1.Add(x[l] - 1);// координату х клетки слева в конец списка
                        y1.Add(y[l]);// координату y клетки слева в конец списка
                    }
                    if (array[x[l], y[l] - 1] == 0)// если клетка сверху свободна то ей присваивается значение на 1 больше чем в текущей
                    {
                        array[x[l], y[l] - 1] = array[x[l], y[l]] + 1;
                        x1.Add(x[l]);// координату х клетки сверху в конец списка
                        y1.Add(y[l] - 1);// координату y клетки сверху в конец списка
                    }
                    l++; // переход на следующую координату текущего списка
                }
                l = 0;// обнуляет список текущих координат
                x.Clear();// очищает список текущих координат х
                y.Clear();// очищает список текущих координат у
                x.AddRange(x1);// заполняет список текущих координат х значениями накопленных координат
                y.AddRange(y1);// заполняет список текущих координат у значениями накопленных координат
                x.Add(-1);// добавляет знак окончания списка
                y.Add(-1);// добавляет знак окончания списка
                x1.Clear();// очищает списки накопленных координат
                y1.Clear();// очищает списки накопленных координат
            }
            if (array[int.Parse(inp[0]), int.Parse(inp[1])] <= 0) // если нет свободных ячеек прохода == 0, то везде стены или обратный ход == -1 
            {
                Console.WriteLine("Пути нет");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("Из исходной точки ({0} {1}) в конечную ({2} {3}) путь равен: {4}",
                    inp1[0], inp1[1], inp[0], inp[1], array[int.Parse(inp[0]), int.Parse(inp[1])] + 1);
                Console.ReadKey();
            }